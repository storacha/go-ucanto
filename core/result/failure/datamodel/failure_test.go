package datamodel

import (
	"testing"

	"github.com/ipld/go-ipld-prime/node/basicnode"
	"github.com/ipld/go-ipld-prime/printer"
	"github.com/stretchr/testify/require"
)

func TestBind(t *testing.T) {
	t.Run("all fields", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(3)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("name")
		require.NoError(t, err)
		err = na.AssignString("BigError")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("message")
		require.NoError(t, err)
		err = na.AssignString("boom")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("stack")
		require.NoError(t, err)
		err = na.AssignString("at xyz")
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Equal(t, *f.Name, "BigError")
		require.Equal(t, f.Message, "boom")
		require.Equal(t, f.Error(), "boom")
		require.Equal(t, *f.Stack, "at xyz")
	})

	t.Run("missing name", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(2)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("message")
		require.NoError(t, err)
		err = na.AssignString("boom")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("stack")
		require.NoError(t, err)
		err = na.AssignString("at xyz")
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Nil(t, f.Name)
		require.Equal(t, f.Message, "boom")
		require.Equal(t, f.Error(), "boom")
		require.Equal(t, *f.Stack, "at xyz")
	})

	t.Run("non-string name", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(3)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("name")
		require.NoError(t, err)
		err = na.AssignInt(5)
		require.NoError(t, err)
		na, err = ma.AssembleEntry("message")
		require.NoError(t, err)
		err = na.AssignString("boom")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("stack")
		require.NoError(t, err)
		err = na.AssignString("at xyz")
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Nil(t, f.Name)
		require.Equal(t, f.Message, "boom")
		require.Equal(t, f.Error(), "boom")
		require.Equal(t, *f.Stack, "at xyz")
	})

	t.Run("missing message", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(3)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("name")
		require.NoError(t, err)
		err = na.AssignString("BigError")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("stack")
		require.NoError(t, err)
		err = na.AssignString("at xyz")
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Equal(t, *f.Name, "BigError")
		require.Equal(t, f.Message, "")
		require.Equal(t, f.Error(), "")
		require.Equal(t, *f.Stack, "at xyz")
	})

	t.Run("non-string message", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(3)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("name")
		require.NoError(t, err)
		err = na.AssignString("BigError")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("message")
		require.NoError(t, err)
		err = na.AssignInt(5)
		require.NoError(t, err)
		na, err = ma.AssembleEntry("stack")
		require.NoError(t, err)
		err = na.AssignString("at xyz")
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Equal(t, *f.Name, "BigError")
		require.Equal(t, f.Message, "")
		require.Equal(t, f.Error(), "")
		require.Equal(t, *f.Stack, "at xyz")
	})
	t.Run("missing stack", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(2)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("name")
		require.NoError(t, err)
		err = na.AssignString("BigError")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("message")
		require.NoError(t, err)
		err = na.AssignString("boom")
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Equal(t, *f.Name, "BigError")
		require.Equal(t, f.Message, "boom")
		require.Equal(t, f.Error(), "boom")
		require.Nil(t, f.Stack)
	})
	t.Run("non-string stack", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		ma, err := nb.BeginMap(3)
		require.NoError(t, err)
		na, err := ma.AssembleEntry("name")
		require.NoError(t, err)
		err = na.AssignString("BigError")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("message")
		require.NoError(t, err)
		err = na.AssignString("boom")
		require.NoError(t, err)
		na, err = ma.AssembleEntry("stack")
		require.NoError(t, err)
		err = na.AssignInt(5)
		require.NoError(t, err)
		err = ma.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Equal(t, *f.Name, "BigError")
		require.Equal(t, f.Message, "boom")
		require.Equal(t, f.Error(), "boom")
		require.Nil(t, f.Stack)
	})
	t.Run("non map", func(t *testing.T) {
		np := basicnode.Prototype.Any
		nb := np.NewBuilder()
		la, err := nb.BeginList(1)
		require.NoError(t, err)
		err = la.AssembleValue().AssignString("test")
		require.NoError(t, err)
		err = la.Finish()
		require.NoError(t, err)
		nd := nb.Build()
		t.Log(printer.Sprint(nd))

		f := Bind(nd)
		require.Nil(t, f.Name)
		require.Equal(t, f.Message, "")
		require.Equal(t, f.Error(), "")
		require.Nil(t, f.Stack)
	})
}
